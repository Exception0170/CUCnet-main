# main.py
import os
import logging
import time
from datetime import datetime
from typing import Dict, Any
from logging.handlers import RotatingFileHandler

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from config import *
from shared.database import DatabaseManager

# Command cooldowns
cooldowns: Dict[str, float] = {}

# messages
welcome_message = """üéâ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CUCnet!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏:
/newprofile - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å WireGuard
/profiles - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏ —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏
/rename - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å

üîê –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:
/site_login - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç

üí° –°–ø—Ä–∞–≤–∫–∞:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
- –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–æ 3 –ø—Ä–æ—Ñ–∏–ª–µ–π WireGuard
- –¢–∏–ø—ã –ø—Ä–æ—Ñ–∏–ª–µ–π: Personal –∏ Webserver
- –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /newprofile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!"""

tos_message = """
üìã –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞

–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:

1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
2. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
3. –†–∞–∑—Ä–µ—à–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ 3 –ø—Ä–æ—Ñ–∏–ª–µ–π WireGuard
4. –¢–∏–ø—ã –ø—Ä–æ—Ñ–∏–ª–µ–π:
   - Personal: –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (IP: 10.8.100.0/24 - 10.8.255.0/24)
   - Webserver: –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤ (IP: 10.8.10.0/24 - 10.8.25.0/24)

5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –° –Ω–∏–º–∏ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ -> http://cucnet.ru:8000/legal/tos
"""
help_message = """
ü§ñ <b>CUCnet Profile Bot - –°–ø—Ä–∞–≤–∫–∞</b>

üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ WireGuard:</b>
/newprofile - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å WireGuard (–º–∞–∫—Å–∏–º—É–º 3)
/profiles - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏ —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
/rename - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å

üîê <b>–î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:</b>
/site_login - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç

üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–æ 3 –ø—Ä–æ—Ñ–∏–ª–µ–π WireGuard
- –¢–∏–ø—ã –ø—Ä–æ—Ñ–∏–ª–µ–π: Personal (–ª–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ) –∏ Webserver (–¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–≤)
- –ö–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """


# Utils
def check_cooldown(user_id: int, command: str, cooldown_seconds: int) -> bool:
    """Check command cooldown"""
    key = f"{user_id}_{command}"
    current_time = time.time()

    if key in cooldowns:
        if current_time - cooldowns[key] < cooldown_seconds:
            return False

    cooldowns[key] = current_time
    return True


def log_user_action(user_id: int, action: str, result: str, details: str = None):
    """Log user action"""
    details_str = f", details={details}" if details else ""
    logger.info(f"user_id={user_id}, action={action}, result={result}{details_str}")


def is_admin_chat(chat_id: int) -> bool:
    """Check if command is executed in admin chat"""
    return chat_id == ADMIN_CHAT_ID


def validate_profile_name(name: str) -> bool:
    """Validate profile name"""
    if not name or len(name) > 50:
        return False
    # Allow letters, numbers, spaces, and basic punctuation
    return all(c.isalnum() or c in ' -_.' for c in name)


# Keyboards
def get_tos_keyboard():
    """Get TOS agreement keyboard"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data="tos_accept"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å", callback_data="tos_reject")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_profile_type_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("Personal", callback_data="profile_type:Personal"),
            InlineKeyboardButton("Webserver", callback_data="profile_type:Webserver")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_profiles_keyboard(profiles, action_type):
    keyboard = []
    for profile in profiles:
        button_text = f"{profile['profile_name']} ({profile['profile_type']}) - {profile['assigned_ip']}"
        callback_data = f"{action_type}_profile:{profile['id']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    return InlineKeyboardMarkup(keyboard)


def get_profile_config_keyboard(profiles):
    """Keyboard for selecting profile to get config"""
    keyboard = []
    for profile in profiles:
        button_text = f"{profile['profile_name']} ({profile['profile_type']})"
        callback_data = f"get_config:{profile['id']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    return InlineKeyboardMarkup(keyboard)


def get_admin_approval_keyboard(user_id):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_user:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_user:{user_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# Commands
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username

    # Check if user already exists
    existing_user = db.get_user(user_id)
    if existing_user:
        if existing_user['ignored']:
            await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        elif existing_user['is_verified']:
            await update.message.reply_text("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
            return
        else:
            await update.message.reply_text("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.")
            return

    # Send TOS agreement

    await update.message.reply_text(
        tos_message,
        reply_markup=get_tos_keyboard(),
        parse_mode='Markdown'
    )
    log_user_action(user_id, "/start", "tos_shown")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    await update.message.reply_text(help_message, parse_mode='HTML')
    log_user_action(user_id, "/help", "shown")


async def newprofile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newprofile"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user or not user['is_verified'] or user['ignored']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
    profile_count = db.get_profile_count(user_id)
    if profile_count >= MAX_PROFILES_PER_USER:
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {MAX_PROFILES_PER_USER} –ø—Ä–æ—Ñ–∏–ª—è. –ù–æ–≤—ã–π —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ª—å–∑—è")
        log_user_action(user_id, "/newprofile", "failed", "limit reached")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
    keyboard = get_profile_type_keyboard()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è:",
        reply_markup=keyboard
    )


async def profiles_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profiles"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user or not user['is_verified'] or user['ignored']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profiles = db.get_user_profiles(user_id)

    if not profiles:
        await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å –ø–æ–º–æ—â—å—é /newprofile")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ—Ñ–∏–ª–µ–π
    message = "üìã –í–∞—à–∏ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
    for profile in profiles:
        message += f"‚Ä¢ **{profile['profile_name']}** ({profile['profile_type']}) - `{profile['assigned_ip']}`\n"

    message += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª:"

    keyboard = get_profile_config_keyboard(profiles)
    await update.message.reply_text(
        message,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    log_user_action(user_id, "/profiles", "success", f"count={len(profiles)}")


async def rename_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rename"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user or not user['is_verified'] or user['ignored']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profiles = db.get_user_profiles(user_id)

    if not profiles:
        await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    keyboard = get_profiles_keyboard(profiles, 'rename')
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )


async def site_login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /site_login"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.get_user(user_id)
    if not user or not user['is_verified'] or user['ignored']:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    site_password = user.get('site_password')
    if not site_password:
        site_password = db.generate_password()
        db.set_site_password(user_id, site_password)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    message = f"""üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç:
–õ–æ–≥–∏–Ω: {user['username'] or f'user_{user_id}'}
–ü–∞—Ä–æ–ª—å: `{site_password}`"""

    await update.message.reply_text(message, parse_mode='Markdown')
    log_user_action(user_id, "/site_login", "success")


async def rejected_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rejected (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin chat only)
    if not is_admin_chat(chat_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ignored_users = db.get_ignored_users()

    if not ignored_users:
        await update.message.reply_text("üìù –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    message = "üìã –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in ignored_users:
        username = user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'
        message += f"‚Ä¢ ID: {user['user_id']}, @{username}\n"

    message += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban <ID –∏–ª–∏ username> —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"

    await update.message.reply_text(message)
    log_user_action(user_id, "/rejected", "success", f"count={len(ignored_users)}")


async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /pending (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin chat only)
    if not is_admin_chat(chat_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    pending_users = db.get_pending_users()

    if not pending_users:
        await update.message.reply_text("üìù –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    message = "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è:\n\n"
    keyboard_buttons = []

    for user in pending_users:
        username = user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'
        message += f"‚Ä¢ ID: {user['user_id']}, @{username}\n"

        keyboard_buttons.append([
            InlineKeyboardButton(
                f"‚úÖ {user['user_id']}",
                callback_data=f"approve_user:{user['user_id']}"
            ),
            InlineKeyboardButton(
                f"‚ùå {user['user_id']}",
                callback_data=f"reject_user:{user['user_id']}"
            )
        ])

    keyboard = InlineKeyboardMarkup(keyboard_buttons)
    await update.message.reply_text(message, reply_markup=keyboard)
    log_user_action(user_id, "/pending", "success", f"count={len(pending_users)}")


async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin chat only)
    if not is_admin_chat(chat_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username:\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/ban 123456789\n"
            "/ban @username\n"
            "/ban username"
        )
        return

    target = context.args[0]
    admin_username = update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'

    try:
        # Try to parse as user ID
        if target.isdigit():
            target_user_id = int(target)
            target_user = db.get_user(target_user_id)

            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Ban the user
            if db.reject_user(target_user_id):
                target_username = target_user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                    f"ID: {target_user_id}\n"
                    f"Username: @{target_username}\n"
                    f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: @{admin_username}"
                )
                log_user_action(user_id, "/ban", "success", f"target_id={target_user_id}")

                # Send ban notification to the user
                ban_message = """üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."""

                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=ban_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # Handle username (with or without @)
        else:
            # Remove @ if present
            target_username = target.lstrip('@')
            target_user = db.get_user_by_username(target_username)

            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Ban the user
            if db.reject_user(target_user['telegram_id']):
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                    f"ID: {target_user['telegram_id']}\n"
                    f"Username: @{target_username}\n"
                    f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: @{admin_username}"
                )
                log_user_action(user_id, "/ban", "success", f"target_username={target_username}")

                # Send ban notification to the user
                ban_message = """üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."""

                try:
                    await context.bot.send_message(
                        chat_id=target_user['telegram_id'],
                        text=ban_message
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user['telegram_id']}: {e}")

            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in ban_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unban (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin chat only)
    if not is_admin_chat(chat_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username:\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/unban 123456789\n"
            "/unban @username\n"
            "/unban username"
        )
        return

    target = context.args[0]
    admin_username = update.effective_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'

    try:
        # Try to parse as user ID
        if target.isdigit():
            target_user_id = int(target)
            target_user = db.get_user(target_user_id)

            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Unban AND approve the user
            if db.unban_user(target_user_id) and db.approve_user(target_user_id):
                target_username = target_user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω\n"
                    f"ID: {target_user_id}\n"
                    f"Username: @{target_username}\n"
                    f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: @{admin_username}"
                )
                log_user_action(user_id, "/unban", "success", f"target_id={target_user_id}")

                # Send welcome message to the user
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=welcome_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # Handle username (with or without @)
        else:
            # Remove @ if present
            target_username = target.lstrip('@')
            target_user = db.get_user_by_username(target_username)

            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # Unban AND approve the user
            if db.unban_user(target_user['telegram_id']) and db.approve_user(target_user['telegram_id']):
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –æ–¥–æ–±—Ä–µ–Ω\n"
                    f"ID: {target_user['telegram_id']}\n"
                    f"Username: @{target_username}\n"
                    f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: @{admin_username}"
                )
                log_user_action(user_id, "/unban", "success", f"target_username={target_username}")

                # Send welcome message to the user
                try:
                    await context.bot.send_message(
                        chat_id=target_user['telegram_id'],
                        text=welcome_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user['telegram_id']}: {e}")

            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in unban_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = query.from_user.id
    chat_id = query.message.chat_id

    if data == 'tos_accept':
        # User accepted TOS
        username = query.from_user.username
        db.add_user(user_id, username)

        # Send approval request to admin group
        admin_keyboard = get_admin_approval_keyboard(user_id)
        admin_message = f"""
üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø:
ID: {user_id}
Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–ò–º—è: {query.from_user.first_name}
        """

        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            reply_markup=admin_keyboard
        )

        await query.edit_message_text(
            "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            "üëã –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. "
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
        )
        log_user_action(user_id, "tos", "accepted")

    elif data == 'tos_reject':
        # User rejected TOS
        await query.edit_message_text(
            "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—Å–ª–æ–≤–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è."
        )
        log_user_action(user_id, "tos", "rejected")

    elif data.startswith('profile_type:'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
        profile_type = data.split(':', 1)[1]
        context.user_data['selected_profile_type'] = profile_type
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è:")

    elif data.startswith('rename_profile:'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        profile_id = int(data.split(':', 1)[1])
        context.user_data['selected_profile_id'] = profile_id
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è:")

    elif data.startswith('get_config:'):
        # Get profile config file
        profile_id = int(data.split(':', 1)[1])
        user = db.get_user(user_id)

        if not user or not user['is_verified'] or user['ignored']:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return

        config_content = db.get_profile_config(profile_id)
        if not config_content:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        # Get profile info for filename
        profiles = db.get_user_profiles(user_id)
        profile_info = next((p for p in profiles if p['id'] == profile_id), None)

        if profile_info:
            filename = f"{profile_info['profile_name']}.conf"
            # Send as file
            await context.bot.send_document(
                chat_id=user_id,
                document=config_content.encode('utf-8'),
                filename=filename,
                caption=f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {profile_info['profile_name']}\n"
                        f"üìç IP: {profile_info['assigned_ip']}\n"
                        f"üîß –¢–∏–ø: {profile_info['profile_type']}"
            )
            await query.edit_message_text("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            log_user_action(user_id, "get_config", "success", f"profile_id={profile_id}")
        else:
            await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    elif data.startswith('approve_user:'):
        # –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = int(data.split(':', 1)[1])
        if is_admin_chat(chat_id):
            # Get target user info for the message
            target_user = db.get_user(target_user_id)
            admin_username = query.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'

            if db.approve_user(target_user_id):
                # Update the admin message with username
                target_username = target_user['username'] if target_user else '–Ω–µ —É–∫–∞–∑–∞–Ω'
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω\n"
                    f"ID: {target_user_id}\n"
                    f"Username: @{target_username}\n"
                    f"–û–¥–æ–±—Ä–∏–ª: @{admin_username}"
                )
                log_user_action(user_id, "approve_user", "success", f"target={target_user_id}")

                # Send welcome message to approved user
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=welcome_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

    elif data.startswith('reject_user:'):
        # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user_id = int(data.split(':', 1)[1])
        if is_admin_chat(chat_id):
            # Get target user info for the message
            target_user = db.get_user(target_user_id)
            admin_username = query.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'

            if db.reject_user(target_user_id):
                # Update the admin message with username
                target_username = target_user['username'] if target_user else '–Ω–µ —É–∫–∞–∑–∞–Ω'
                await query.edit_message_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
                    f"ID: {target_user_id}\n"
                    f"Username: @{target_username}\n"
                    f"–û—Ç–∫–ª–æ–Ω–∏–ª: @{admin_username}"
                )
                log_user_action(user_id, "reject_user", "success", f"target={target_user_id}")

                # Send rejection message to the user
                rejection_message = """‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω.

    –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"""

                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=rejection_message
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if 'selected_profile_type' in context.user_data:
        profile_type = context.user_data['selected_profile_type']
        profile_name = text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if not validate_profile_name(profile_name):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π
        profile_count = db.get_profile_count(user_id)
        if profile_count >= MAX_PROFILES_PER_USER:
            await update.message.reply_text(f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {MAX_PROFILES_PER_USER} –ø—Ä–æ—Ñ–∏–ª—è. –ù–æ–≤—ã–π —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ª—å–∑—è")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        success, message = db.add_profile(user_id, profile_name, profile_type)
        if success:
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_name} —Å–æ–∑–¥–∞–Ω")

            # Get the created profile to send config file
            profiles = db.get_user_profiles(user_id)
            new_profile = next((p for p in profiles if p['profile_name'] == profile_name), None)

            if new_profile:
                config_content = db.get_profile_config(new_profile['id'])
                if config_content:
                    filename = f"{profile_name}.conf"
                    await update.message.reply_document(
                        document=config_content.encode('utf-8'),
                        filename=filename,
                        caption=f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {profile_name}\n"
                                f"üìç IP: {new_profile['assigned_ip']}\n"
                                f"üîß –¢–∏–ø: {profile_type}"
                    )

            log_user_action(user_id, "create_profile", "success", f"name={profile_name}, type={profile_type}")
        else:
            await update.message.reply_text(f"‚ùå {message}")
            log_user_action(user_id, "create_profile", "failed", f"name={profile_name}, error={message}")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
    elif 'selected_profile_id' in context.user_data:
        profile_id = context.user_data['selected_profile_id']
        new_name = text.strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
        if not validate_profile_name(new_name):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã")
            return

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        if db.rename_profile(profile_id, new_name):
            await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω")
            log_user_action(user_id, "rename_profile", "success", f"profile_id={profile_id}, new_name={new_name}")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            log_user_action(user_id, "rename_profile", "failed", "duplicate name")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()


def setup_logging():
    """Setup logging configuration"""
    # Create logs directory if it doesn't exist
    log_dir = os.path.dirname("logs/bot.log")
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # Configure root logger
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=[
            logging.StreamHandler()
        ]
    )

    # Set specific log levels for external libraries
    logging.getLogger('telegram').setLevel(logging.WARNING)
    logging.getLogger('httpx').setLevel(logging.WARNING)


def main():
    setup_logging()
    global logger
    logger = logging.getLogger(__name__)

    # check token
    if not PROFILE_BOT_TOKEN or PROFILE_BOT_TOKEN == 'your_telegram_bot_token_here':
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return

    logger.info("Starting bot...")

    # db init
    global db
    try:
        db = DatabaseManager()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    application = Application.builder().token(PROFILE_BOT_TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("newprofile", newprofile_command))
    application.add_handler(CommandHandler("profiles", profiles_command))
    application.add_handler(CommandHandler("rename", rename_command))
    application.add_handler(CommandHandler("site_login", site_login_command))
    application.add_handler(CommandHandler("rejected", rejected_command))
    application.add_handler(CommandHandler("pending", pending_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))

    # Add callback query handler
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # Add text message handler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    print("CUCnet profile bot running!")
    print("Ctrl+C to stop")

    try:
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        print("Bot stopped")


if __name__ == '__main__':
    main()