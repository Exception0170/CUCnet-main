import os
import json
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import logging
from config import NEWS_BOT_TOKEN, NEWS_JSON_FILE, NEWS_CHANNEL_ID, ADMIN_CHAT_ID

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


# Load existing news
def load_news():
    if os.path.exists(NEWS_JSON_FILE):
        with open(NEWS_JSON_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []


# Save news to JSON
def save_news(news_list):
    with open(NEWS_JSON_FILE, 'w', encoding='utf-8') as f:
        json.dump(news_list, f, ensure_ascii=False, indent=2)


# Check if user is authorized
def is_authorized(chat_id):
    return chat_id == ADMIN_CHAT_ID


# Store message IDs for deletion
def save_message_id(news_id, message_id):
    news_list = load_news()
    for news in news_list:
        if news['id'] == news_id:
            news['channel_message_id'] = message_id
            break
    save_news(news_list)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_chat.id):
        await update.message.reply_text("Unauthorized access.")
        return

    await update.message.reply_text(
        "–ë–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π CUCnet-–∞!\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/news - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å(–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å!)\n"
        "/list - –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π(–¥–∞ –ª–∞–¥–Ω–æ0\n"
        "/delete <id> - –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É(–∏–∑ –∫–∞–Ω–∞–ª–∞ —Ç–æ–∂–µ —É–¥–∞–ª–∏—Ç –¥–∞–¥–∞)"
    )


async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_chat.id):
        await update.message.reply_text("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!!! 403!!!.")
        return

    # Store that we're waiting for news input
    context.user_data['waiting_for_news'] = True
    await update.message.reply_text("–û—Ç–≤–µ—Ç—å —Å–æ–æ–±–µ—â–Ω–∏–µ–º —Å –Ω–æ–≤–æ—Å—Ç—å—é(–ò–º–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç—å):")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_chat.id):
        return

    if context.user_data.get('waiting_for_news'):
        # This is a news message
        news_text = update.message.text
        news_list = load_news()

        # Create news entry
        news_id = len(news_list) + 1
        news_entry = {
            "id": news_id,
            "text": news_text,
            "date": datetime.now().strftime("%Y-%m-%d"),
            "timestamp": datetime.now().isoformat()
        }

        news_list.append(news_entry)
        save_news(news_list)

        # Post to channel
        try:
            bot = Bot(token=NEWS_BOT_TOKEN)
            message = await bot.send_message(
                chat_id=NEWS_CHANNEL_ID,
                text=f"[{news_entry['date']}]: {news_text}"
            )
            # Save the channel message ID for future deletion
            save_message_id(news_id, message.message_id)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –∫–∞–Ω–∞–ª: {e}")

        context.user_data['waiting_for_news'] = False
        await update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! ID: {news_id}")


async def list_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_chat.id):
        await update.message.reply_text("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!! 403!!! get dunked on!")
        return

    news_list = load_news()

    if not news_list:
        await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç—É.")
        return

    response = "üì∞ News List:\n\n"
    for news in news_list[-10:]:  # Show last 10 news
        response += f"ID: {news['id']}\n"
        response += f"–î–∞—Ç–∞: {news['date']}\n"
        response += f"{news['text'][:100]}...\n"
        response += "‚îÄ" * 30 + "\n"

    await update.message.reply_text(response)


async def delete_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_chat.id):
        await update.message.reply_text("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!!! 403!!.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <news_id>")
        return

    try:
        news_id = int(context.args[0])
        news_list = load_news()

        # Find news to delete
        news_to_delete = None
        for news in news_list:
            if news['id'] == news_id:
                news_to_delete = news
                break

        if not news_to_delete:
            await update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. 404!")
            return

        # Delete from channel if message ID exists
        if news_to_delete.get('channel_message_id'):
            try:
                bot = Bot(token=NEWS_BOT_TOKEN)
                await bot.delete_message(
                    chat_id=NEWS_CHANNEL_ID,
                    message_id=news_to_delete['channel_message_id']
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—á—Ç–µ–π —Å –∫–∞–Ω–∞–ª–∞: {e}")
                await update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –Ω–æ –Ω–µ —Å –∫–∞–Ω–∞–ª–∞: {e}")

        # Remove from news list
        news_list = [news for news in news_list if news['id'] != news_id]

        # Reindex IDs
        for i, news in enumerate(news_list, 1):
            news['id'] = i

        save_news(news_list)
        await update.message.reply_text(f"–ù–æ–≤–æ—Å—Ç—å —Å ID {news_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")

    except ValueError:
        await update.message.reply_text("–î–∞–π –º–Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π ID(int).")


def main():
    # Validate environment variables
    if not all([NEWS_BOT_TOKEN, ADMIN_CHAT_ID, NEWS_CHANNEL_ID]):
        logging.error("Missing required environment variables. Please check your .env file.")
        return

    application = Application.builder().token(NEWS_BOT_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("news", news_command))
    application.add_handler(CommandHandler("list", list_news))
    application.add_handler(CommandHandler("delete", delete_news))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start the bot
    logging.info("Bot started successfully!")
    application.run_polling()


if __name__ == "__main__":
    main()
